-- Database for Car Dealership program

-- Create tables

CREATE TABLE CAR (
    CAR_ID NUMBER NOT NULL,
    YEAR_MANUFACTURED NUMBER,
    CAR_MAKE VARCHAR(100),
    CAR_MODEL VARCHAR(100),
    PRICE NUMBER,
    MONTHLY_PAYMENT NUMBER,
    CUSTOMER_ID NUMBER,
    PRIMARY KEY (CAR_ID)
);
/

CREATE TABLE DEALERSHIP_EMPLOYEE (
    EMPLOYEE_ID NUMBER NOT NULL,
    FIRST_NAME VARCHAR(100),
    LAST_NAME VARCHAR(100),
    USER_NAME VARCHAR(100),
    USER_PASSWORD VARCHAR(100),
    PRIMARY KEY (EMPLOYEE_ID)
);
/

CREATE TABLE DEALERSHIP_CUSTOMER (
    CUSTOMER_ID NUMBER NOT NULL,
    FIRST_NAME VARCHAR(100),
    LAST_NAME VARCHAR(100),
    USER_NAME VARCHAR(100),
    USER_PASSWORD VARCHAR(100),
    PRIMARY KEY (CUSTOMER_ID)
);
/

CREATE TABLE OFFER (
    CUSTOMER_ID NUMBER NOT NULL,
    CAR_ID NUMBER NOT NULL,
    AMOUNT NUMBER
);
/

-- Alter tables for foreign keys

ALTER TABLE CAR
ADD FOREIGN KEY (CUSTOMER_ID) REFERENCES DEALERSHIP_CUSTOMER(CUSTOMER_ID);
/

ALTER TABLE OFFER
ADD FOREIGN KEY (CUSTOMER_ID) REFERENCES DEALERSHIP_CUSTOMER(CUSTOMER_ID);
/

ALTER TABLE OFFER
ADD FOREIGN KEY (CAR_ID) REFERENCES CAR(CAR_ID);
/

-- Alter offer table to make composite primary key

ALTER TABLE OFFER
ADD CONSTRAINT OFFER_ID PRIMARY KEY (CUSTOMER_ID, CAR_ID);
/

-- Create sequences and triggers to auto-generate primary key values for tables

-- Sequences

CREATE SEQUENCE SQ_CAR_PK
START WITH 1000
INCREMENT BY 1;
/

CREATE SEQUENCE SQ_DEALERSHIP_EMPLOYEE_PK
START WITH 1000
INCREMENT BY 1;
/

CREATE SEQUENCE SQ_EMP_PK
START WITH 1000;
/

CREATE SEQUENCE SQ_DEALERSHIP_CUSTOMER_PK
START WITH 1000
INCREMENT BY 1;
/

CREATE SEQUENCE SQ_CUST_PK
START WITH 1000;
/

-- Triggers

CREATE OR REPLACE TRIGGER TR_INSERT_CAR
BEFORE INSERT ON CAR
FOR EACH ROW
BEGIN
    SELECT SQ_CAR_PK.NEXTVAL INTO
    :NEW.CAR_ID FROM DUAL;
END;
/

CREATE OR REPLACE TRIGGER TR_INSERT_DEALERSHIP_EMPLOYEE
BEFORE INSERT ON DEALERSHIP_EMPLOYEE
FOR EACH ROW
BEGIN
    SELECT SQ_EMP_PK.NEXTVAL INTO
    :NEW.EMPLOYEE_ID FROM DUAL;
END;
/

CREATE OR REPLACE TRIGGER TR_INSERT_DEALERSHIP_CUSTOMER
BEFORE INSERT ON DEALERSHIP_CUSTOMER
FOR EACH ROW
BEGIN
    SELECT SQ_CUST_PK.NEXTVAL INTO
    :NEW.CUSTOMER_ID FROM DUAL;
END;
/

-- **************************************************************

-- SELECT statements for testing purposes

SELECT * FROM CAR
ORDER BY CAR_ID;
/

SELECT * FROM CAR
WHERE CUSTOMER_ID IS NULL
ORDER BY CAR_ID;
/

SELECT * FROM CAR
WHERE CUSTOMER_ID IS NOT NULL
ORDER BY CAR_ID;
/

SELECT * FROM DEALERSHIP_CUSTOMER
ORDER BY CUSTOMER_ID;
/

SELECT * FROM DEALERSHIP_EMPLOYEE
ORDER BY EMPLOYEE_ID;
/

SELECT * FROM OFFER;
/

-- ********************************

-- STORED PROCEDURE FOR ACCEPTING AN OFFER

CREATE OR REPLACE PROCEDURE ACCEPT_OFFER (
    P_CUSTOMER_ID IN NUMBER,
    P_CAR_ID IN NUMBER,
    P_AMOUNT IN NUMBER
)
IS
BEGIN
    -- UPDATE CAR.CUSTOMER_ID TO CUSTOMER_ID OF NEW OWNER
    UPDATE CAR
    SET CUSTOMER_ID = P_CUSTOMER_ID
    WHERE CAR_ID = P_CAR_ID;
    -- SUBTRACT AMOUNT OFFERED FROM PRICE AND UPDATE CAR.PRICE ACCORDINGLY
    UPDATE CAR
    SET PRICE = PRICE - P_AMOUNT
    WHERE CAR_ID = P_CAR_ID;
    -- DIVIDE THE NEW PRICE BY 36 TO GET THE MONTHLY PAYMENT
    UPDATE CAR
    SET MONTHLY_PAYMENT = ROUND(PRICE / 36.00, 2)
    WHERE CAR_ID = P_CAR_ID;
    -- DELETE ALL OFFERS RELATED TO THAT CAR
    DELETE FROM OFFER
    WHERE CAR_ID = P_CAR_ID;
END;
/

/*
-- TEST EXECUTION OF ACCEPT_OFFER STORED PROCEDURE
DECLARE
    P_CUSTOMER_ID NUMBER;
    P_CAR_ID NUMBER;
    P_AMOUNT NUMBER;
BEGIN
    ACCEPT_OFFER (1004, 1009, 8500);
END;
/
*/

-- ********************************

SELECT *
FROM CAR
FULL OUTER JOIN OFFER
ON CAR.CAR_ID = OFFER.CAR_ID;
/

SELECT *
FROM OFFER
FULL OUTER JOIN CAR
ON OFFER.CAR_ID = CAR.CAR_ID;
/

SELECT DEALERSHIP_CUSTOMER.CUSTOMER_ID, DEALERSHIP_CUSTOMER.FIRST_NAME, DEALERSHIP_CUSTOMER.LAST_NAME
FROM DEALERSHIP_CUSTOMER
INNER JOIN OFFER ON DEALERSHIP_CUSTOMER.CUSTOMER_ID = OFFER.CUSTOMER_ID
ORDER BY OFFER.CUSTOMER_ID;
/

SELECT FIRST_NAME, LAST_NAME, AMOUNT,YEAR_MANUFACTURED, CAR_MAKE, CAR_MODEL, PRICE
FROM DEALERSHIP_CUSTOMER CUST, OFFER O, CAR C
WHERE CUST.CUSTOMER_ID = O.CUSTOMER_ID AND C.CAR_ID = O.CAR_ID;
/

-- **************************************************************